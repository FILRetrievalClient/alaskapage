{"version":3,"sources":["SiteLayout.tsx","components/VisualizationDecision.tsx","Routers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuItemKey","lightColors","darkColors","uLightColors","uDarkColors","VisualizationDecision","currentFocus","containerRef","React","createRef","highlighting","curShowNodes","curShowEdges","curShowNodesMap","Map","showNodes","showEdges","nodes","edges","nodeMap","edgesMap","width","height","LIMIT_OVERFLOW_WIDTH","LIMIT_OVERFLOW_HEIGHT","gColors","unlightColorMap","forEach","lcolor","i","push","set","graph","layoutCfg","type","nodeSize","d","size","nodeStrength","collideStrength","alphaDecay","preventOverlap","onTick","nodeItems","getNodes","get","item","model","getModel","x","y","refreshDragedNodePosition","e","fx","fy","G6","registerBehavior","getEvents","wheel","onWheel","ev","ctrlKey","point","getPointByClient","clientX","clientY","ratio","getZoom","wheelDelta","zoomTo","moveX","moveY","bbox","getBBox","leftTopPoint","getCanvasByPoint","minX","minY","rightBottomPoint","maxX","maxY","translate","deltaX","movementX","deltaY","movementY","preventDefault","registerNode","drawShape","cfg","group","self","this","r","path","keyShape","addShape","attrs","fill","color","name","mask","opacity","shadowColor","split","substr","shadowBlur","shadowOffsetX","shadowOffsetY","directions","rs","changeDirections","rr","Math","random","animate","getBubblePath","repeat","duration","directions2","rs2","num","dire","spNum","cpNum","unitAngle","PI","angleSum","sps","cps","speed","spX","cos","spY","sin","j","cpAngleRand","cpR","sign","setState","value","shape","attr","oriFill","uColor","label","onFrame","registerEdge","shapeStyle","getShapeStyle","Object","assign","strokeOpacity","afterDraw","style","useEffect","current","scrollWidth","scrollHeight","Graph","container","linkCenter","layout","modes","default","defaultNode","labelCfg","position","fontStyle","defaultEdge","on","level","setAutoPaint","edgeItems","getEdges","node","setItemState","light","tags","findTagsMap","mid","fTag","isLeaf","tag","itemModel","mt","t","ts","undefined","source","getSource","target","getTarget","paint","layoutController","layoutMethod","forceSimulation","stop","snode","findById","id","length","csedge","csnode","positionsAnimate","linkDistance","edgeStrength","findTags","tlength","isChild","parents","randomAngle","lineWidth","parentsNum","parent","parentColor","fontSize","lineHeight","edgeId","edge","findTagsLength","nu","lu","nv","lv","setTimeout","changeData","concat","clearItemStates","fetch","then","res","json","data","fontWeight","childrenNum","propertyName","visualRange","minp","maxp","rangepLength","rangevLength","mapNodeSize","render","loadData","ref","Header","Layout","Content","Footer","Sider","SubMenu","Menu","SiteLayout","useState","collapsed","setCollapsed","menuItemHide","setMenuItemHide","DefaultLayout","collapsible","onCollapse","c","Logo","theme","defaultSelectedKeys","mode","onClick","prev","map","key","Number","Item","Import","icon","PieChartOutlined","Retrieve","DesktopOutlined","UserOutlined","title","TotalAmount","Income","Outgo","TeamOutlined","Account","Password","ToolOutlined","Baidu","href","rel","SiteHeader","margin","padding","minHeight","background","textAlign","styled","div","Routers","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1c2c6bf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  TeamOutlined,\n  UserOutlined,\n  ToolOutlined,\n} from '@ant-design/icons';\n\nimport VisualizationDecision from './components/VisualizationDecision';\n\nenum MenuItemKey {\n    Import,                 // 0: 存储\n    Retrieve,               // 1: 检索\n    TotalAmount,            // 2: 总额\n    Income,                 // 3: 收入\n    Outgo,                  // 4: 支出\n    Account,                // 5: 账号\n    Password,               // 6: 密码\n    VisualizationDecision,  // 7: 图表决策\n    Baidu,                  // 8: 百度，测试\n};\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst SiteLayout: React.FunctionComponent = (): JSX.Element => {\n    const [collapsed, setCollapsed] = useState<boolean>(false);\n\n    const [menuItemHide, setMenuItemHide] = useState<boolean[]>([\n        true,  // Import,                 => 0: 存储\n        true,  // Retrieve,               => 1: 检索\n        true,  // TotalAmount,            => 2: 总额\n        true,  // Income,                 => 3: 收入\n        true,  // Outgo,                  => 4: 支出\n        true,  // Account,                => 5: 账号\n        true,  // Password,               => 6: 密码\n        true,  // VisualizationDecision,  => 7: 图表决策\n        true,  // Baidu,                  => 8: 百度，测试\n    ]);\n\n    const onCollapse = (c: boolean) => {\n        setCollapsed(c);\n    }\n\n    const onMenuItemClick = (e: any) => {\n        setMenuItemHide(prev => {\n            prev = prev.map((item, key) => Number(e.key) === Number(key) ? false : item || true);\n            return prev;\n        });\n    };\n\n    return (\n        <DefaultLayout>\n            <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\n                <Logo />\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={onMenuItemClick}>\n                    <Menu.Item key={MenuItemKey.Import} icon={<PieChartOutlined />}>\n                        存储\n                    </Menu.Item>\n                    <Menu.Item key={MenuItemKey.Retrieve} icon={<DesktopOutlined />}>\n                        检索\n                    </Menu.Item>\n                    <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"资产\">\n                        <Menu.Item key={MenuItemKey.TotalAmount}>总额</Menu.Item>\n                        <Menu.Item key={MenuItemKey.Income}>收入</Menu.Item>\n                        <Menu.Item key={MenuItemKey.Outgo}>支出</Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"我的\">\n                        <Menu.Item key={MenuItemKey.Account}>账号</Menu.Item>\n                        <Menu.Item key={MenuItemKey.Password}>密码</Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub3\" icon={<ToolOutlined />} title=\"工具\">\n                        <Menu.Item key={MenuItemKey.VisualizationDecision}>图表决策</Menu.Item>\n                        <Menu.Item key={MenuItemKey.Baidu}><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener noreferrer ~\">百度</a></Menu.Item>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Layout>\n                <SiteHeader />\n                <Content style={{ margin: '0 16px' }}>\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>User</Breadcrumb.Item>\n                        <Breadcrumb.Item>Bill</Breadcrumb.Item>\n                        <Breadcrumb.Item>Apple</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <div style={{ padding: 24, minHeight: 360, background: '#fff' }}>\n                        {!menuItemHide[MenuItemKey.VisualizationDecision] && <VisualizationDecision />}\n                    </div>\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>Alaska ©2020 Created by Damon HKC</Footer>\n            </Layout>\n        </DefaultLayout>\n    );\n};\n\nexport default SiteLayout;\n\nconst DefaultLayout = styled(Layout)`\n    min-height: 100vh;\n`;\n\nconst Logo = styled.div`\n    height: 32px;\n    background: rgba(255, 255, 255, 0.2);\n    margin: 16px;\n`;\n\nconst SiteHeader = styled(Header)`\n    background: #fff;\n    padding: 0;\n`;\n\n","import React, { useEffect } from 'react';\nimport G6 from \"@antv/g6\";\n\nconst lightColors = [\n    \"#8FE9FF\",\n    \"#87EAEF\",\n    \"#FFC9E3\",\n    \"#A7C2FF\",\n    \"#FFA1E3\",\n    \"#FFE269\",\n    \"#BFCFEE\",\n    \"#FFA0C5\",\n    \"#D5FF86\"\n];\nconst darkColors = [\n    \"#7DA8FF\",\n    \"#44E6C1\",\n    \"#FF68A7\",\n    \"#7F86FF\",\n    \"#AE6CFF\",\n    \"#FF5A34\",\n    \"#5D7092\",\n    \"#FF6565\",\n    \"#6BFFDE\"\n];\nconst uLightColors = [\n    \"#CFF6FF\",\n    \"#BCFCFF\",\n    \"#FFECF5\",\n    \"#ECFBFF\",\n    \"#EAD9FF\",\n    \"#FFF8DA\",\n    \"#DCE2EE\",\n    \"#FFE7F0\",\n    \"#EEFFCE\"\n];\nconst uDarkColors = [\n    \"#CADBFF\",\n    \"#A9FFEB\",\n    \"#FFC4DD\",\n    \"#CACDFF\",\n    \"#FFD4F2\",\n    \"#FFD3C9\",\n    \"#EBF2FF\",\n    \"#FFCBCB\",\n    \"#CAFFF3\"\n];\n\nconst mapNodeSize = (nodes: any, propertyName: any, visualRange: any) => {\n    let minp = 9999999999;\n    let maxp = -9999999999;\n    nodes.forEach((node: any) => {\n        minp = node[propertyName] < minp ? node[propertyName] : minp;\n        maxp = node[propertyName] > maxp ? node[propertyName] : maxp;\n    });\n    const rangepLength = maxp - minp;\n    const rangevLength = visualRange[1] - visualRange[0];\n    nodes.forEach((node: any) => {\n        node.size =\n        ((node[propertyName] - minp) / rangepLength) * rangevLength +\n        visualRange[0];\n    });\n};\n\nconst VisualizationDecision: React.FunctionComponent = (): JSX.Element => {\n    const containerRef = React.createRef<HTMLDivElement>();\n\n    let highlighting = false;\n    let curShowNodes: any[] = [];\n    let curShowEdges: any[] = [];\n    let currentFocus: any;\n    let curShowNodesMap = new Map();\n    let showNodes: any[] = [];\n    let showEdges: any[] = [];\n    let nodes: any[] = [];\n    let edges: any[] = [];\n    let nodeMap = new Map();\n    let edgesMap = new Map();\n\n    let width = 0;\n    let height = 0;\n    let LIMIT_OVERFLOW_WIDTH = 0;\n    let LIMIT_OVERFLOW_HEIGHT = 0;\n\n    const gColors: string[] = [];\n    const unlightColorMap = new Map();\n    lightColors.forEach((lcolor, i) => {\n        gColors.push(\"l(0) 0:\" + lcolor + \" 1:\" + darkColors[i]);\n        unlightColorMap.set(\n            gColors[i],\n            \"l(0) 0:\" + uLightColors[i] + \" 1:\" + uDarkColors[i]\n        );\n    });\n\n    let graph: any = null;\n    const layoutCfg = {\n        type: \"force\",\n        nodeSize: (d: any) => {\n            return d.size / 2 + 5;\n        },\n        nodeStrength: 2500,\n        collideStrength: 0.8,\n        alphaDecay: 0.01,\n        preventOverlap: true,\n        onTick: () => {\n            const nodeItems = graph.getNodes();\n            const height = graph.get(\"height\");\n            const width = graph.get(\"width\");\n            const padding = 10;\n            nodeItems.forEach((item: any) => {\n            const model = item.getModel();\n            if (model.x > width - padding) model.x = width - padding;\n            else if (model.x < padding) model.x = padding;\n        \n            if (model.y > height - padding) model.y = height - padding;\n            else if (model.y < padding) model.y = padding;\n            });\n        }\n    };\n\n    G6.registerBehavior(\"double-finger-drag-canvas\", {\n        getEvents: function getEvents() {\n            return {\n            wheel: \"onWheel\"\n            };\n        },\n\n        onWheel: (ev: any) => {\n            if (ev.ctrlKey) {\n                const canvas = graph.get(\"canvas\");\n                const point = canvas.getPointByClient(ev.clientX, ev.clientY);\n                let ratio = graph.getZoom();\n                if (ev.wheelDelta > 0) {\n                    ratio = ratio + ratio * 0.05;\n                } else {\n                    ratio = ratio - ratio * 0.05;\n                }\n                graph.zoomTo(ratio, {\n                    x: point.x,\n                    y: point.y\n                });\n            } else {\n                const x = ev.deltaX || ev.movementX;\n                const y = ev.deltaY || ev.movementY;\n                translate(x, y);\n            }\n            ev.preventDefault();\n        }\n    });\n\n    G6.registerNode(\n        \"bubble\",\n        {\n            drawShape(cfg: any, group: any) {\n                const self = this;\n                const r = cfg.size / 2;\n                // a circle by path\n                const path = [\n                    [\"M\", -r, 0],\n                    [\"C\", -r, r / 2, -r / 2, r, 0, r],\n                    [\"C\", r / 2, r, r, r / 2, r, 0],\n                    [\"C\", r, -r / 2, r / 2, -r, 0, -r],\n                    [\"C\", -r / 2, -r, -r, -r / 2, -r, 0],\n                    [\"Z\"]\n                ];\n                const keyShape = group.addShape(\"path\", {\n                    attrs: {\n                        x: 0,\n                        y: 0,\n                        path,\n                        fill: cfg.color || \"steelblue\"\n                    },\n                    name: \"path-shape\"\n                });\n\n                const mask = group.addShape(\"path\", {\n                    attrs: {\n                        x: 0,\n                        y: 0,\n                        path,\n                        opacity: 0.25,\n                        fill: cfg.color || \"steelblue\",\n                        shadowColor: cfg.color.split(\" \")[2].substr(2),\n                        shadowBlur: 40,\n                        shadowOffsetX: 0,\n                        shadowOffsetY: 30\n                    },\n                    name: \"mask-shape\"\n                });\n\n                const spNum = 10; // split points number\n                const directions: any[] = [], rs: any[] = [];\n                self.changeDirections(spNum, directions);\n                for (let i = 0; i < spNum; i++) {\n                    const rr = r + directions[i] * ((Math.random() * r) / 1000); // +-r/6, the sign according to the directions\n                    if (rs[i] < 0.97 * r) rs[i] = 0.97 * r;\n                    else if (rs[i] > 1.03 * r) rs[i] = 1.03 * r;\n                    rs.push(rr);\n                }\n                keyShape.animate(\n                    () => {\n                        const path = self.getBubblePath(r, spNum, directions, rs);\n                        return { path };\n                    },\n                    {\n                        repeat: true,\n                        duration: 10000\n                    }\n                );\n\n                const directions2: any[] = [], rs2: any[] = [];\n                self.changeDirections(spNum, directions2);\n                for (let i = 0; i < spNum; i++) {\n                    const rr = r + directions2[i] * ((Math.random() * r) / 1000); // +-r/6, the sign according to the directions\n                    if (rs2[i] < 0.97 * r) rs2[i] = 0.97 * r;\n                    else if (rs2[i] > 1.03 * r) rs2[i] = 1.03 * r;\n                    rs2.push(rr);\n                }\n                mask.animate(\n                    () => {\n                        const path = self.getBubblePath(r, spNum, directions2, rs2);\n                        return { path };\n                    },\n                    {\n                        repeat: true,\n                        duration: 10000\n                    }\n                );\n                return keyShape;\n            },\n            changeDirections(num: any, directions: any) {\n                for (let i = 0; i < num; i++) {\n                    if (!directions[i]) {\n                    const rand = Math.random();\n                    const dire = rand > 0.5 ? 1 : -1;\n                    directions.push(dire);\n                    } else {\n                    directions[i] = -1 * directions[i];\n                    }\n                }\n                return directions;\n            },\n            getBubblePath(r: any, spNum: any, directions: any, rs: any) {\n                const path = [];\n                const cpNum = spNum * 2; // control points number\n                const unitAngle = (Math.PI * 2) / spNum; // base angle for split points\n                let angleSum = 0;\n                const sps = [];\n                const cps = [];\n                for (let i = 0; i < spNum; i++) {\n                    const speed = 0.001 * Math.random();\n                    rs[i] = rs[i] + directions[i] * speed * r; // +-r/6, the sign according to the directions\n                    if (rs[i] < 0.97 * r) {\n                        rs[i] = 0.97 * r;\n                        directions[i] = -1 * directions[i];\n                    } else if (rs[i] > 1.03 * r) {\n                        rs[i] = 1.03 * r;\n                        directions[i] = -1 * directions[i];\n                    }\n                    const spX = rs[i] * Math.cos(angleSum);\n                    const spY = rs[i] * Math.sin(angleSum);\n                    sps.push({ x: spX, y: spY });\n                    for (let j = 0; j < 2; j++) {\n                        const cpAngleRand = unitAngle / 3;\n                        const cpR = rs[i] / Math.cos(cpAngleRand);\n                        const sign = j === 0 ? -1 : 1;\n                        const x = cpR * Math.cos(angleSum + sign * cpAngleRand);\n                        const y = cpR * Math.sin(angleSum + sign * cpAngleRand);\n                        cps.push({ x, y });\n                    }\n                    angleSum += unitAngle;\n                }\n                path.push([\"M\", sps[0].x, sps[0].y]);\n                for (let i = 1; i < spNum; i++) {\n                    path.push([\n                    \"C\",\n                    cps[2 * i - 1].x,\n                    cps[2 * i - 1].y,\n                    cps[2 * i].x,\n                    cps[2 * i].y,\n                    sps[i].x,\n                    sps[i].y\n                    ]);\n                }\n                path.push([\n                    \"C\",\n                    cps[cpNum - 1].x,\n                    cps[cpNum - 1].y,\n                    cps[0].x,\n                    cps[0].y,\n                    sps[0].x,\n                    sps[0].y\n                ]);\n                path.push([\"Z\"]);\n                return path;\n            },\n            setState(name, value, item: any) {\n                const shape = item.get(\"keyShape\");\n                if (name === \"dark\") {\n                    if (value) {\n                    if (shape.attr(\"fill\") !== \"#fff\") {\n                        shape.oriFill = shape.attr(\"fill\");\n                        const uColor = unlightColorMap.get(shape.attr(\"fill\"));\n                        shape.attr(\"fill\", uColor);\n                    } else {\n                        shape.attr(\"opacity\", 0.2);\n                    }\n                    } else {\n                    if (shape.attr(\"fill\") !== \"#fff\") {\n                        shape.attr(\"fill\", shape.oriFill || shape.attr(\"fill\"));\n                    } else {\n                        shape.attr(\"opacity\", 1);\n                    }\n                    }\n                }\n            }\n        },\n        \"single-node\"\n    );\n\n    G6.registerNode(\n        \"animate-circle\",\n        {\n            setState(name, value, item: any) {\n                const shape = item.get(\"keyShape\");\n                const label = shape.get(\"parent\").get(\"children\")[1];\n                if (name === \"disappearing\" && value) {\n                    shape.animate(\n                        (ratio: any) => {\n                            return {\n                                opacity: 1 - ratio,\n                                r: shape.attr(\"r\") * (1 - ratio)\n                            };\n                        },\n                        {\n                            duration: 200\n                        }\n                    );\n                    label.animate(\n                        (ratio: any) => {\n                            return {\n                                opacity: 1 - ratio\n                            };\n                        },\n                        {\n                            duration: 500\n                        }\n                    );\n                } else if (name === \"appearing\" && value) {\n                    const r = item.getModel().size / 2;\n                    shape.animate(\n                        (ratio: any) => {\n                            return {\n                                opacity: ratio,\n                                r: r * ratio,\n                                fill: shape.attr(\"fill\")\n                            };\n                        },\n                        {\n                            duration: 300\n                        }\n                    );\n                    label.animate(\n                        {\n                            onFrame(ratio: any) {\n                                return {\n                                    opacity: ratio\n                                };\n                            }\n                        },\n                        {\n                            duration: 300\n                        }\n                    );\n                } else if (name === \"dark\") {\n                    if (value) {\n                        if (shape.attr(\"fill\") !== \"#fff\") {\n                            shape.oriFill = shape.attr(\"fill\");\n                            const uColor = unlightColorMap.get(shape.attr(\"fill\"));\n                            shape.attr(\"fill\", uColor);\n                        } else {\n                            shape.attr(\"opacity\", 0.2);\n                            label.attr(\"fill\", \"#A3B1BF\");\n                        }\n                    } else {\n                        if (shape.attr(\"fill\") !== \"#fff\") {\n                            shape.attr(\"fill\", shape.oriFill || shape.attr(\"fill\"));\n                        } else {\n                            shape.attr(\"opacity\", 1);\n                            label.attr(\"fill\", \"#697B8C\");\n                        }\n                    }\n                }\n            }\n        },\n        \"circle\"\n    );\n\n    G6.registerEdge(\n        \"animate-line\",\n        {\n            drawShape(cfg: any, group: any) {\n                const self = this;\n                let shapeStyle = self.getShapeStyle(cfg);\n                shapeStyle = Object.assign(shapeStyle, {\n                    opacity: 0,\n                    strokeOpacity: 0\n                });\n                const keyShape = group.addShape(\"path\", {\n                    attrs: shapeStyle,\n                    name: \"path-shape\"\n                });\n                return keyShape;\n            },\n            afterDraw(cfg: any, group: any) {\n                const shape = group.get(\"children\")[0];\n                shape.animate(\n                    (ratio: any) => {\n                        const opacity = ratio * cfg.style.opacity;\n                        const strokeOpacity = ratio * cfg.style.strokeOpacity;\n                        return {\n                            opacity: ratio || opacity,\n                            strokeOpacity: ratio || strokeOpacity\n                        };\n                    },\n                    {\n                        duration: 300\n                    }\n                );\n            },\n            setState(name, value, item: any) {\n                const shape = item.get(\"keyShape\");\n                if (name === \"disappearing\" && value) {\n                    shape.animate(\n                    (ratio: any) => {\n                        return {\n                            opacity: 1 - ratio,\n                            strokeOpacity: 1 - ratio\n                        };\n                    },\n                    {\n                        duration: 200\n                    }\n                    );\n                } else if (name === \"dark\") {\n                    if (value) shape.attr(\"opacity\", 0.2);\n                    else shape.attr(\"opacity\", 1);\n                }\n            }\n        },\n        \"line\"\n    );\n\n    function translate(x: number, y: number) {\n        let moveX = x;\n        let moveY = y;\n\n        /* 获得当前偏移量*/\n        const group = graph.get(\"group\");\n        const bbox = group.getBBox();\n        const leftTopPoint = graph.getCanvasByPoint(bbox.minX, bbox.minY);\n        const rightBottomPoint = graph.getCanvasByPoint(bbox.maxX, bbox.maxY);\n        /* 如果 x 轴在区域内，不允许左右超过100 */\n        if (x < 0 && leftTopPoint.x - x > LIMIT_OVERFLOW_WIDTH) {\n            moveX = 0;\n        }\n        if (x > 0 && rightBottomPoint.x - x < width - LIMIT_OVERFLOW_WIDTH) {\n            moveX = 0;\n        }\n\n        if (y < 0 && leftTopPoint.y - y > LIMIT_OVERFLOW_HEIGHT) {\n            moveY = 0;\n        }\n        if (y > 0 && rightBottomPoint.y - y < height - LIMIT_OVERFLOW_HEIGHT) {\n            moveY = 0;\n        }\n        graph.translate(-moveX, -moveY);\n    }\n\n    function refreshDragedNodePosition(e: any) {\n        const model = e.item.get(\"model\");\n        model.fx = e.x;\n        model.fy = e.y;\n    }\n\n    const loadData = (data: any) => {\n        const layoutController = graph.get(\"layoutController\");\n        layoutController.layoutCfg.nodeStrength = 2500;\n        layoutController.layoutCfg.collideStrength = 0.8;\n        layoutController.layoutCfg.alphaDecay = 0.01;\n        nodes = data.nodes;\n        edges = data.edges;\n\n        showNodes = [];\n        showEdges = [];\n        nodeMap = new Map();\n        edgesMap = new Map();\n        // find the roots\n        nodes.forEach((node: any) => {\n            if (node.level === 0) {\n                node.color = gColors[showNodes.length % gColors.length];\n                node.style = {\n                    fill: gColors[showNodes.length % gColors.length],\n                    lineWidth: 0\n                };\n                node.labelCfg = {\n                    style: {\n                    fontSize: 25,\n                    fill: \"#fff\",\n                    fontWeight: 300\n                    }\n                };\n                node.x = Math.random() * 800;\n                node.y = Math.random() * 800;\n                showNodes.push(node);\n            }\n            if (!node.isLeaf) {\n                const num = node.childrenNum ? `\\n(${node.childrenNum})` : \"\";\n                node.label = `${node.name}${num}`;\n            } else {\n                node.label = node.name;\n            }\n            nodeMap.set(node.id, node);\n        });\n\n        mapNodeSize(showNodes, \"childrenNum\", [120, 180]);\n\n        // map the color to F nodes, same to its parent\n        nodes.forEach(node => {\n            if (node.level !== 0 && !node.isLeaf) {\n                const parent = nodeMap.get(node.tags[0]);\n                node.color = parent.color;\n                node.style = {\n                    fill: parent.color\n                };\n            }\n        });\n        edges.forEach(edge => {\n            // map the id\n            edge.id = `${edge.source}-${edge.target}`;\n            edge.style = {\n                lineWidth: 0.5,\n                opacity: 1,\n                strokeOpacity: 1\n            };\n            edgesMap.set(edge.id, edge);\n        });\n        graph.data({\n            nodes: showNodes,\n            edges: showEdges\n        });\n        graph.render();\n    };\n\n    useEffect(() => {\n        width = containerRef.current?.scrollWidth as number;\n        height = containerRef.current?.scrollHeight as number ||  500;\n        LIMIT_OVERFLOW_WIDTH = width;\n        LIMIT_OVERFLOW_HEIGHT = height;\n\n        if (!graph) {\n            graph = new G6.Graph({\n                container: containerRef.current as HTMLDivElement,\n                width,\n                height,\n                linkCenter: true,\n                layout: layoutCfg,\n                modes: {\n                    default: [\"drag-canvas\"]\n                },\n                defaultNode: {\n                    type: \"circle\", // 'bubble'\n                    size: 95,\n                    labelCfg: {\n                        position: \"center\",\n                        style: {\n                        fill: \"white\",\n                        fontStyle: \"bold\"\n                        }\n                    }\n                },\n                defaultEdge: {\n                    color: \"#888\",\n                    type: \"animate-line\" //'animate-line'\n                }\n            });\n            graph.get(\"canvas\").set(\"localRefresh\", false);\n\n            graph.on(\"node:dragstart\", (e: any) => {\n                graph.layout();\n                refreshDragedNodePosition(e);\n            });\n            graph.on(\"node:drag\", (e: any) => {\n                refreshDragedNodePosition(e);\n            });\n            graph.on(\"node:dragend\", (e: any) => {\n                e.item.get(\"model\").fx = null;\n                e.item.get(\"model\").fy = null;\n            });\n\n            graph.on(\"node:mouseenter\", (e: any) => {\n                const item = e.item;\n                const model = item.getModel();\n                if (model.level === 0) {\n                    return;\n                }\n                highlighting = true;\n                graph.setAutoPaint(false);\n                const nodeItems = graph.getNodes();\n                const edgeItems = graph.getEdges();\n                nodeItems.forEach((node: any) => {\n                    graph.setItemState(node, \"dark\", true);\n                    node.getModel().light = false;\n                });\n                graph.setItemState(item, \"dark\", false);\n                model.light = true;\n                const tags = model.tags;\n                const findTagsMap = new Map();\n                let mid = 0;\n\n                let fTag = \"\";\n                // if the model is F node, find the leaves of it\n                if (!model.isLeaf && model.level !== 0) {\n                    fTag = model.tag;\n                    nodeItems.forEach((item: any) => {\n                        const itemModel = item.getModel();\n                        if (!itemModel.isLeaf) return;\n                        const modelTags = itemModel.tags;\n                        modelTags.forEach((mt: any) => {\n                            const mts = mt.split(\"-\");\n                            if (mts[1] === fTag) {\n                                graph.setItemState(item, \"dark\", false);\n                                itemModel.light = true;\n                            }\n                        });\n                    });\n                }\n\n                // find the tags\n                tags.forEach((t: any) => {\n                    const ts = t.split(\"-\");\n                    findTagsMap.set(ts[0], mid);\n                    mid++;\n                    if (ts[1]) {\n                        findTagsMap.set(ts[1], mid);\n                        mid++;\n                    }\n                });\n                // find the nodes with tag === tags[?]\n                nodeItems.forEach((item: any) => {\n                    const node = item.getModel();\n                    if (findTagsMap.get(node.tag) !== undefined) {\n                        graph.setItemState(item, \"dark\", false);\n                        node.light = true;\n                    }\n                });\n                edgeItems.forEach((item: any) => {\n                    const source = item.getSource().getModel();\n                    const target = item.getTarget().getModel();\n                    if (source.light && target.light) {\n                        graph.setItemState(item, \"dark\", false);\n                    } else {\n                        graph.setItemState(item, \"dark\", true);\n                    }\n                });\n                graph.paint();\n                graph.setAutoPaint(true);\n            });\n\n            graph.on(\"node:mouseleave\", () => {\n                if (highlighting) {\n                    const nodeItems = graph.getNodes();\n                    const edgeItems = graph.getEdges();\n                    highlighting = false;\n                    nodeItems.forEach((item: any) => {\n                        graph.setItemState(item, \"dark\", false);\n                    });\n                    edgeItems.forEach((item: any) => {\n                        graph.setItemState(item, \"dark\", false);\n                    });\n                }\n            });\n\n            // click root to expand\n            graph.on(\"node:click\", (e: any) => {\n                curShowNodes = [];\n                curShowEdges = [];\n                const item = e.item;\n                const model = item.getModel();\n                if (!model.isLeaf && model.level !== 0) {\n                    return;\n                }\n                // if clicked a root, hide unrelated items and show the related items\n                if (model.level === 0) {\n                    const layoutController = graph.get(\"layoutController\");\n                    const forceLayout = layoutController.layoutMethod;\n                    forceLayout.forceSimulation.stop();\n                    // light the level 0 nodes\n                    showNodes.forEach(snode => {\n                        const item = graph.findById(snode.id);\n                        graph.setItemState(item, \"dark\", false);\n                        if (snode.x < 0.5 * width) {\n                            snode.x = 300;\n                        } else {\n                            snode.x = width - 300;\n                        }\n                    });\n                    model.x = width / 2;\n                    model.y = height / 2;\n                    // animatively hide the items which are going to disappear\n                    if (curShowEdges.length) {\n                        curShowEdges.forEach(csedge => {\n                            const item = graph.findById(csedge.id);\n                            item && graph.setItemState(item, \"disappearing\", true);\n                        });\n                    }\n                    curShowNodes.forEach(csnode => {\n                        const item = graph.findById(csnode.id);\n                        item && graph.setItemState(item, \"disappearing\", true);\n                    });\n                    graph.positionsAnimate();\n                \n                    // reset curShowNodes nad curShowEdges\n                    curShowNodes = [];\n                    curShowEdges = [];\n                \n                    // click on the same node which is the current focus node, hide the small nodes, change the layout parameters to roots view\n                    if (currentFocus && currentFocus.id === model.id) {\n                        currentFocus = undefined;\n                        layoutController.layoutCfg.nodeStrength = 2500;\n                        layoutController.layoutCfg.collideStrength = 0.8;\n                        layoutController.layoutCfg.alphaDecay = 0.01;\n                    } else {\n                        // click other focus node, hide the current small nodes and show the related nodes\n                        currentFocus = model;\n                        // change data after the original items disappearing\n                        const layoutController = graph.get(\"layoutController\");\n                        layoutController.layoutCfg.nodeStrength = () => {\n                            return -80;\n                        };\n                        layoutController.layoutCfg.collideStrength = 0.2;\n                        layoutController.layoutCfg.linkDistance = (d: any) => {\n                        if (d.source.level !== 0) return 120;\n                            const length = 250;\n                            return length;\n                        };\n                        layoutController.layoutCfg.edgeStrength = () => {\n                            return 2;\n                        };\n                \n                        const tag = model.tag;\n                        const findTags: any[] = [];\n                        curShowNodesMap = new Map();\n                        // find the nodes which are the descendants of clicked model\n                        nodes.forEach(node => {\n                            if (!node.tags) return;\n                            const tags = node.tags;\n                            const tlength = tags.length;\n                            let isChild = false;\n                            const parents = [];\n                            for (let i = 0; i < tlength; i++) {\n                                const ts = tags[i].split(\"-\");\n                                if (ts[0] === tag) {\n                                    isChild = true;\n                                }\n                                parents.push(nodeMap.get(ts[0]));\n                            }\n                            if (isChild) {\n                                const randomAngle = Math.random() * 2 * Math.PI;\n                                node.x = model.x + (Math.cos(randomAngle) * model.size) / 2 + 10;\n                                node.y = model.y + (Math.sin(randomAngle) * model.size) / 2 + 10;\n                                // const dist = (model.x - node.x) * (model.x - node.x) + (model.y - node.y) * (model.y - node.y);\n                    \n                                if (!node.style) node.style = {};\n                                node.style.lineWidth = 0;\n                                node.style.opacity = 1;\n                                if (node.isLeaf) {\n                                    node.shape = \"animate-circle\";\n                                    let color = \"l(0)\";\n                                    const parentsNum = parents.length;\n                                    parents.forEach((parent, i) => {\n                                        const parentColor = parent.color.split(\" \")[1].substr(2);\n                                        color += ` ${i / (parentsNum - 1)}:${parentColor}`;\n                                    });\n                                    if (parentsNum === 1) {\n                                        color = model.color.split(\" \")[1].substr(2);\n                                    }\n                                    node.color = color;\n                                    node.style.fill = color;\n                                    node.style.fill = \"#fff\";\n                                    node.style.lineWidth = 1;\n                                    node.size = 60;\n                                    node.labelCfg = {\n                                        style: {\n                                            fontSize: 11,\n                                            lineHeight: 19,\n                                            fill: \"#697B8C\"\n                                        },\n                                        position: \"center\"\n                                    };\n                                } else if (node.level !== 0) {\n                                    node.shape = \"circle\"; // 'bubble';\n                                    node.size = 95;\n                                    if (!node.style) node.style = {};\n                                    node.color = model.color;\n                                    node.style.fill = model.color;\n                                    node.labelCfg = {\n                                        style: {\n                                            fill: \"#fff\",\n                                            fontSize: 14\n                                        },\n                                        position: \"center\"\n                                    };\n                                }\n                                curShowNodes.push(node);\n                                curShowNodesMap.set(node.id, node);\n                    \n                                // add the edge connect from model to node which exists in edges\n                                const edgeId = `${model.id}-${node.id}`;\n                                const edge = edgesMap.get(edgeId);\n                                if (edge) {\n                                    edge.color = model.color;\n                                    curShowEdges.push(edge);\n                                }\n                                tags.forEach((t: any) => {\n                                    const ts = t.split(\"-\");\n                                    if (ts[0] !== tag) {\n                                        findTags.push(ts[0]);\n                                    }\n                                    if (ts[1]) {\n                                        findTags.push(ts[1]);\n                                    }\n                                });\n                            }\n                        });\n                \n                        // find the nodes which are the ancestors of the current curShowNodes\n                        nodes.forEach(node => {\n                            const findTagsLength = findTags.length;\n                            for (let i = 0; i < findTagsLength; i++) {\n                                if (\n                                    node.tag === findTags[i] &&\n                                    curShowNodesMap.get(node.id) === undefined\n                                ) {\n                                    curShowNodes.push(node);\n                                    curShowNodesMap.set(node.id, node);\n                                    return;\n                                }\n                            }\n                        });\n                \n                        // find the edges whose target end source are in the curShowNodes\n                        curShowNodes.forEach((nu, i) => {\n                            const lu = nu.level;\n                            curShowNodes.forEach((nv, j) => {\n                                if (j <= i) return;\n                                const lv = nv.level;\n                                let edgeId;\n                                if (lu < lv) {\n                                    edgeId = `${nu.id}-${nv.id}`;\n                                } else {\n                                    edgeId = `${nv.id}-${nu.id}`;\n                                }\n                                let color = model.color;\n                                if (nu.isLeaf) {\n                                    if (nv.level === 0 && nv.tag !== model.tag) color = \"#DFE5EB\";\n                                    else if (!nv.isLeaf && nv.tags[0] !== model.tag) {\n                                        color = \"#DFE5EB\";\n                                    }\n                                } else if (nv.isLeaf) {\n                                    if (nu.level === 0 && nu.tag !== model.tag) color = \"#DFE5EB\";\n                                    else if (!nu.isLeaf && nu.tags[0] !== model.tag) {\n                                        color = \"#DFE5EB\";\n                                    }\n                                }\n                                const edge = edgesMap.get(edgeId);\n                                if (edge) {\n                                    edge.color = color;\n                                    curShowEdges.push(edge);\n                                }\n                            });\n                        });\n                    }\n                    setTimeout(() => {\n                        graph.changeData({\n                            nodes: showNodes.concat(curShowNodes),\n                            edges: showEdges.concat(curShowEdges)\n                        });\n                        const nodeItems = graph.getNodes();\n                        const edgeItems = graph.getEdges();\n                        edgeItems.forEach((item: any) => {\n                            graph.clearItemStates(item);\n                        });\n                        nodeItems.forEach((item: any) => {\n                            graph.clearItemStates(item);\n                            graph.setItemState(item, \"appearing\", true);\n                        });\n                    }, 400);\n                }\n            });\n\n            graph.on(\"canvas:click\", () => {\n                currentFocus = undefined;\n                const forceLayout = graph.get(\"layoutController\").layoutMethod;\n                forceLayout.forceSimulation.stop();\n                const nodeItems = graph.getNodes();\n                const edgeItems = graph.getEdges();\n                if (highlighting) {\n                    highlighting = false;\n                    nodeItems.forEach((item: any) => {\n                        graph.setItemState(item, \"dark\", false);\n                    });\n                    edgeItems.forEach((item: any) => {\n                        graph.setItemState(item, \"dark\", false);\n                    });\n                } else {\n                  nodeItems.forEach((item: any) => {\n                        const model = item.getModel();\n                        if (model.level === 0) {\n                            graph.setItemState(item, \"dark\", false);\n                        } else {\n                            graph.setItemState(item, \"disappearing\", true);\n                        }\n                  });\n                  edgeItems.forEach((item: any) => {\n                        graph.setItemState(item, \"disappearing\", true);\n                  });\n                  curShowNodes = [];\n                  curShowEdges = [];\n                  setTimeout(() => {\n                        const layoutController = graph.get(\"layoutController\");\n                        layoutController.layoutCfg.nodeStrength = 2500;\n                        layoutController.layoutCfg.collideStrength = 0.8;\n                        layoutController.layoutCfg.alphaDecay = 0.01;\n                \n                        graph.changeData({\n                            nodes: showNodes,\n                            edges: showEdges\n                        });\n                  }, 400);\n                }\n            });\n\n            fetch(\n                \"https://gw.alipayobjects.com/os/bmw-prod/fc6e64fc-be94-40fb-b9e2-2d13dd414f38.json\"\n            )\n                .then(res => res.json())\n                .then(data => {\n                    loadData(data);\n                });\n\n        }  // if (!graph)\n    }, [\n        curShowEdges,\n        curShowNodes,\n        curShowNodesMap,\n        currentFocus,\n        graph,\n        height,\n        width,\n        highlighting,\n\n        containerRef,\n        edgesMap,\n        layoutCfg,\n        // loadData,\n        nodeMap,\n        nodes,\n        showEdges,\n        showNodes\n    ]);\n\n    return (\n        <div ref={containerRef}></div>\n    )\n};\n\nexport default VisualizationDecision;\n","import React from 'react';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    // Link\n} from \"react-router-dom\";\n\nimport SiteLayout from './SiteLayout';\n\nconst Routers: React.FunctionComponent = (): JSX.Element => {\n    return (\n        <Router>\n            <Switch>\n                <Route path='/'>\n                    <SiteLayout />\n                </Route>\n            </Switch>\n        </Router>\n    );\n};\n\nexport default Routers;\n","import React from 'react';\nimport './App.less';\n\nimport Routers from './Routers';\n\nfunction App() {\n  return (\n    <Routers />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}